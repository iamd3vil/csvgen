// Code generated by csvgen(BuildDate: 2021-06-16 14:50:13, Version: 5e91b05 (2021-06-14 23:25:06 +0530)). DO NOT EDIT.
package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"strconv"
)

func ParsemcxBhavCSV(r io.Reader) ([]mcxBhav, error) {
	recs := make([]mcxBhav, 0)
	rdr := csv.NewReader(r)
	for {
		record, err := rdr.Read()
		if err != nil {
			if err == io.EOF {
				break
			}
			return nil, err
		}
		index := 0
		s := mcxBhav{}
		s.Date = record[index]
		index += 1
		sessionid, err := parseInt32(record[index])
		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into int32", index)
		}

		s.Sessionid = sessionid
		index += 1
		s.Markettype = record[index]
		index += 1
		instrumentid, err := parseInt32(record[index])
		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into int32", index)
		}

		s.Instrumentid = instrumentid
		index += 1
		s.Instrumentname = record[index]
		index += 1
		s.Symbol = record[index]
		index += 1
		s.Expirydate = record[index]
		index += 1
		s.Reserved1 = record[index]
		index += 1
		strike, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Strike = strike
		index += 1
		s.Opttype = record[index]
		index += 1
		prevclose, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Prevclose = prevclose
		index += 1
		open, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Open = open
		index += 1
		high, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.High = high
		index += 1
		low, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Low = low
		index += 1
		close, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Close = close
		index += 1
		volume, err := parseInt64(record[index])
		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into int64", index)
		}

		s.Volume = volume
		index += 1
		totalvalue, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Totalvalue = totalvalue
		index += 1
		lifetimehigh, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Lifetimehigh = lifetimehigh
		index += 1
		lifetimelow, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Lifetimelow = lifetimelow
		index += 1
		s.Unit = record[index]
		index += 1
		settlementprice, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Settlementprice = settlementprice
		index += 1
		numberoftrades, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Numberoftrades = numberoftrades
		index += 1
		oi, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Oi = oi
		index += 1
		avgtradeprice, err := parseFloat64(record[index])

		if err != nil {
			return nil, fmt.Errorf("error while parsing field at index %d into float64", index)
		}

		s.Avgtradeprice = avgtradeprice
		index += 1
		s.Reserved2 = record[index]
		index += 1
		s.Currencycode = record[index]
		index += 1

		recs = append(recs, s)
	}

	return recs, nil
}

func parseInt32(s string) (int32, error) {
	if s == "" {
		return 0, nil
	}
	i, err := strconv.ParseInt(s, 0, 32)
	return int32(i), err
}

func parseInt64(s string) (int64, error) {
	if s == "" {
		return 0, nil
	}
	return strconv.ParseInt(s, 0, 64)
}

func parseFloat32(s string) (float32, error) {
	if s == "" {
		return 0, nil
	}
	i, err := strconv.ParseFloat(s, 32)
	return float32(i), err
}

func parseFloat64(s string) (float64, error) {
	if s == "" {
		return 0, nil
	}
	return strconv.ParseFloat(s, 64)
}
