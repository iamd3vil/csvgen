{% package main %}

{% import "strings" %}

{% code 
type Context struct {
    Pkg string
    Structs []Struct
    Uuid string
}
%}

{% func toLower(str string) %}
{% stripspace %}
{%s= strings.ToLower(str) %}
{% endstripspace %}
{% endfunc %}

{% func CsvTemplate(ctx Context) %}
package {%s= ctx.Pkg %}

import (
    "fmt"
    "strconv"
)

{% for _, str := range ctx.Structs %}
func (s *{%s= str.StructName %}) ParseCSV(rec []string) error {
    {% for _, f := range str.Fields %}
        {% switch f.Type %}
        {% case "string" %}
        s.{%s= f.Name %} = rec[{%d= f.Position %}]
        {% case "int32" %}
        {%s= strings.ToLower(f.Name) %}, err := strconv.ParseInt(rec[{%d= f.Position %}], 0, 32)
        if err != nil {
            return fmt.Errorf("error while parsing {%s= f.Name %} at index: %d", {%d= f.Position %})
        }
        s.{%s= f.Name %} = int32({%s= strings.ToLower(f.Name) %})
        {% case "int64" %}
        {%s= strings.ToLower(f.Name) %}, err := strconv.ParseInt(rec[{%d= f.Position %}], 0, 64)
        if err != nil {
            return fmt.Errorf("error while parsing {%s= f.Name %} at index: %d", {%d= f.Position %})
        }
        s.{%s= f.Name %} = {%s= strings.ToLower(f.Name) %}
        {% case "float32" %}
        {%s= strings.ToLower(f.Name) %}, err := strconv.ParseFloat(rec[{%d= f.Position %}], 32)
        if err != nil {
            return fmt.Errorf("error while parsing {%s= f.Name %} at index: %d", {%d= f.Position %})
        }
        s.{%s= f.Name %} = float32({%s= strings.ToLower(f.Name) %})
        {% case "float64" %}
        {%s= strings.ToLower(f.Name) %}, err := strconv.ParseFloat(rec[{%d= f.Position %}], 64)
        if err != nil {
            return fmt.Errorf("error while parsing {%s= f.Name %} at index: %d", {%d= f.Position %})
        }
        s.{%s= f.Name %} = {%s= strings.ToLower(f.Name) %}
        {% endswitch %}
    {% endfor %}
    return nil
}

{% endfor %}
{% endfunc %}